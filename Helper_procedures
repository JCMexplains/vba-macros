'@Folder("Helpers")
Option Explicit

Public Sub SelectColumnFromTable(ByVal tableName As String, ByVal columnHeader As String)
    
    Dim structuredRefString As String
    
    structuredRefString = tableName & "[[#All],[" & columnHeader & "]]"
    
    ' error handling--if the header name I am looking for doesn't exist, a 1004 error will be raised
    On Error GoTo Handler
    ActiveSheet.Range(structuredRefString).Select
    Exit Sub
    
Handler:
    ' if we somehow raised an error that ISN'T 1004, we still want to crash
    If Err.Number = 1004 Then
        Resume Next
    End If
    
End Sub

Public Sub FixNumberStoredAsText(ByVal sheetName As String)
    
    Dim cellsToExamine      As Variant
    Dim firstCounter           As Long
    Dim secondCounter           As Long
    
    cellsToExamine = ActiveWorkbook.Sheets(sheetName).UsedRange 'UsedRange includes any cell that has ever had a value in it
    
    For firstCounter = 1 To UBound(cellsToExamine, 1) 'the upper bound is built in--Excel knows it
        For secondCounter = 1 To UBound(cellsToExamine, 2)
            If IsNumeric(cellsToExamine(firstCounter, secondCounter)) And WorksheetFunction.IsText(cellsToExamine(firstCounter, secondCounter)) Then
                'first condition tests if a cell "can be evaluated as a number" (not the same as "IS a number"), second condition uses a built-in worksheet function to check if the cell is text
                'when both conditions are true, that's a number stored as text
                With ActiveWorkbook.Sheets(sheetName).Cells(firstCounter, secondCounter)
                    .NumberFormat = "General"
                    .Value = .Value              'this is a kind of magic I see often. Somehow, setting something's value to its value changes numbers stored as text to regular numbers
                End With
            End If
        Next secondCounter
    Next firstCounter
    
End Sub

Public Sub TrimTrailingZero(ByVal targetColumn As Long, ByVal lastRow As Long)
    ' As Long throws an error if the argument coming in is not an integer

    Dim regexOne As Object
    Dim roomNum As String
    Dim firstCounter As Long

    Set regexOne = New RegExp
    
    'this regex will match one or more digits followed by a zero, capturing everything before the zero
    'the dollar sign anchors the match to the end of the string. otherwise we'd get undesired behavior on a number like 13402 which would become 1342
    regexOne.Pattern = "(\d+)0$"
    
    For firstCounter = 1 To lastRow
        roomNum = ActiveSheet.Cells(firstCounter, targetColumn).Value
        ActiveSheet.Cells(firstCounter, targetColumn).Value = regexOne.Replace(roomNum, "$1")
    Next

End Sub

Public Function TableExist(ByVal Sht As Worksheet, ByVal tblName As String) As Boolean
    
    On Error Resume Next
    TableExist = Sht.ListObjects(tblName).Name = tblName
    On Error GoTo 0

End Function



