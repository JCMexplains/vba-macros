Option Explicit

'@EntryPoint
Public Sub Format_BI_exports()
    
    ' BI_cleanup Macro
    ' Clean up export from Power BI
    
    ' variables for the last used row and the last used column
    Dim lastRow     As Long
    Dim lastCol     As Long
    
    ' will use later to iterate
    Dim cellUnderInspection As Range

    Sheets(1).Name = "Class sections"
    
    With Sheet1
        lastRow = Cells(Rows.Count, 1).End(xlUp).Row
        'gets the last used row
        
        lastCol = Cells(3, Columns.Count).End(xlToLeft).Column
        'gets the last used column. at this point row 3 is the header row, so we look there
    End With
    
    Dim folderPath  As String
    folderPath = Application.ActiveWorkbook.Path
    'path without the file name; does not include the final forward slash
    'There is a difference between ActiveWorkbook and ThisWorkbook--Google it


    Dim newName     As String
    newName = folderPath & "/" & "BI export " & MonthName(Month(Date)) & " " & Day(Date) & ".xlsx"

    Dim currentCellSorted As String

    ActiveWorkbook.SaveAs Filename:=newName, FileFormat:=xlOpenXMLWorkbook
    'including FileFormat ensures this will save as xlsx even if it was originally csv
    
    'Kill originalName 'deletes the original file -- works on local folders, won't work on a network folder--why
    
    'listing all the columns we want to delete, omitting the word 'Curriculum' since I'm going to delete that
    Dim colsToDelete(12) As String
    Dim var         As Variant
    colsToDelete(0) = "Outlier"
    colsToDelete(1) = "FTE"
    colsToDelete(2) = "Paid FTE"
    colsToDelete(3) = "Department"
    colsToDelete(4) = "Credit Type"
    colsToDelete(5) = "Primary Instructor Type"
    colsToDelete(6) = "Course Pathway"
    colsToDelete(7) = "ICS Code"
    colsToDelete(8) = "Gen Ed"
    colsToDelete(9) = "SummaryKey"
    colsToDelete(10) = "Course ID Prefix"
    colsToDelete(11) = "Primary Instructor ID"
    colsToDelete(12) = "BC Course Discipline"
    
    'Turn off screen flickering as the macro runs
    Application.ScreenUpdating = False
    
    'delete the first two rows, which we don't need
    Rows("1:2").Delete
    lastRow = lastRow - 2
    
    'freeze panes
    With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 1
        .FreezePanes = True
    End With
    
    'changes names of columns to more human-friendly names, replacing anything of the form Curriculum.xyz with xyz
    ActiveSheet.ListObjects("Table1").HeaderRowRange.Select
    
    'documentation for this replace function: https://docs.microsoft.com/en-us/office/vba/api/excel.range.replace
    'vbNullString is preferred over "" for indicating that you are replacing with an empty string
    Selection.Replace What:="Curriculum.", Replacement:=vbNullString, LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
    'now replace "Division Department" with a shorter version. Header row is already selected
    Selection.Replace What:="Division Department", Replacement:="Div Dept", LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
    'delete some unneeded columns
    'deleting by the name in the header rather than by column number or letter because columns seem to keep getting added to the report
    For Each var In colsToDelete
        Helper_procedures.SelectColumnFromTable "Table1", var
        Selection.Delete Shift:=xlToLeft
        lastCol = lastCol - 1                    'we now have one fewer used column, so we can decrement this variable
    Next var
    
    'calling another Sub, which goes through all cells and changes any "numbers stored as text" to regular numbers
    Helper_procedures.FixNumberStoredAsText ("Class sections")
    
    'find the Sess column and format it
    Helper_procedures.SelectColumnFromTable "Table1", "Sess"
    Selection.FormatConditions.AddDatabar
    With Selection.FormatConditions(1)
        .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
        .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
        .BarColor.Color = 2668287
    End With
            
    
    'select the Enrolled column and format it
    Helper_procedures.SelectColumnFromTable "Table1", "Enrolled"
    Selection.FormatConditions.AddColorScale ColorScaleType:=3
        
    
    'formats instructor names to have a space after the comma
    'the underscore character lets you break a long single-line statement into multiple lines
    Helper_procedures.SelectColumnFromTable "Table1", "Instructor Name"
    Selection.Replace What:=",", Replacement:=", ", LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
 
    
    'cleans up Delivery Method names, e.g. from RemoteLearningBlended to Remote Blended
    'the underscore character lets you break a long single-line statement into multiple lines
    Helper_procedures.SelectColumnFromTable "Table1", "Delivery Method"
    Selection.Replace What:="RemoteLearning", Replacement:="Remote ", LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2

    
    'sort by instructor name
    With ActiveWorkbook.Worksheets("Class sections").ListObjects("Table1").Sort
        .SortFields.Clear
        .SortFields.Add2 Key:=Range("Table1[[#All],[Instructor Name]]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .Apply
    End With
    
    ' sort designators in alphbetical (ASCII-betical?) order
    Helper_procedures.SelectColumnFromTable "Table1", "Designator List"
    For Each cellUnderInspection In Selection.Cells()
        currentCellSorted = SortString(cellUnderInspection)
        cellUnderInspection = currentCellSorted
    Next


    ' calls a Sub that will remove the trailing zero from room numbers
    ' the first argument is the column number of the column named "Rm #"
    ' the single quote before the # in Rm # is a special-character escape
    Helper_procedures.FormatRoomNumbers Range("Table1[[#Headers], [Rm '#]]").Column, lastRow
           
    
    'find the column number of the Div Dept column and store it
    Dim divDeptCol  As Long
    
    divDeptCol = Range("Table1[[#Headers], [Div Dept]]").Column
    
    'The table in this sheet has been named Table1 by default
    'unfortunately, Range.AutoFilter only lets you choose the field to filter by using an integer offset, so we use the integer we found earlier
    ActiveWorkbook.Sheets("Class sections").ListObjects("Table1").Range.AutoFilter Field:=divDeptCol, Criteria1:=Array("ENG1BASE", "ENG1COPR"), Operator:=xlFilterValues
    
    'how to select columns by number rather than by letter (doing it by letter is much easier!)
    'autofits selected columns
    Columns(1).Resize(, lastCol).EntireColumn.AutoFit
    
    'Curt Frye says it's good style to turn screen updating back on at the end of a macro, even though it's technically not necessary
    Application.ScreenUpdating = True
    
End Sub

Public Function SortString(ByVal toSort As String) As String
    Dim substrings       As Variant
    Dim commaDelim As String
    commaDelim = ","
        
    'the line below puts the two-character codes into an array, delimiting with commas
    substrings = Split(Replace(toSort, " ", vbNullString), commaDelim)
    substrings = SortArray(substrings)
        
    ' whatever is assigned to the name of the function is what gets returned
    SortString = Replace(Join(substrings, commaDelim), commaDelim, commaDelim & " ")
End Function

Public Function SortArray(ByRef substrings As Variant) As Variant
    Dim temp        As Variant
    Dim firstCounter           As Long
    Dim secondCounter           As Long
        
    For firstCounter = LBound(substrings) To UBound(substrings) - 1
        For secondCounter = firstCounter + 1 To UBound(substrings)
            'Trim strips leading and trailing spaces
            'this is implementing a bubble sort, i believe
            If substrings(firstCounter) > substrings(secondCounter) Then
                'the three lines below swap firstCounter and secondCounter
                temp = substrings(firstCounter)
                substrings(firstCounter) = substrings(secondCounter)
                substrings(secondCounter) = temp
            End If
        Next secondCounter
    Next firstCounter
    SortArray = substrings
End Function


