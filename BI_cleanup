'@Folder("Cleanup")
Option Explicit

'@EntryPoint
Public Sub Format_BI_exports()
    
    ' BI_cleanup Macro
    ' Clean up export from Power BI
    ' written by Jamie Martin
    
    OpenFile
    
    If Not Helper_procedures.TableExist(ActiveSheet, "Table1") Then
        ' If there is no Table1, we are either on the wrong sheet or have already run this macro, so exit
        MsgBox "This sheet has no Table1 to work on, so this macro didn't do anything.", vbInformation, "Format BI exports"
        Exit Sub
    End If
    
    Application.StatusBar = "Macro running. Press Esc to cancel."
    
    RenameSheet                                  ' Table1 is named ClassListTable now
    
    RenameFile
    
    'Turn off screen flickering as the macro runs
    Application.ScreenUpdating = False
    
    'delete all the rows before the header row
    ActiveSheet.Rows("1:" & (ActiveSheet.Range("ClassListTable[#Headers]").Row - 1)).Delete
    
    ' variables for the last used row and the last used column
    Dim lastRow     As Long
    Dim lastCol     As Long
    
    With ActiveWorkbook.Sheets("Class sections")
        lastRow = .Cells(ActiveSheet.Rows.Count, 1).End(xlUp).Row
        lastCol = .Cells(1, ActiveSheet.Columns.Count).End(xlToLeft).Column
    End With
    
    'freeze panes
    With ActiveWindow
        ' turn off freeze panes in case user has already turned it on
        If .FreezePanes Then .FreezePanes = False
        .SplitColumn = 0
        .SplitRow = 1
        .FreezePanes = True
    End With
    
    'changes names of columns to more human-friendly names, replacing anything of the form Curriculum.xyz with xyz
    'documentation for this replace function: https://docs.microsoft.com/en-us/office/vba/api/excel.range.replace
    'vbNullString is preferred over "" for indicating that you are replacing with an empty string
    ActiveSheet.ListObjects("ClassListTable").HeaderRowRange.Select
    Selection.Replace what:="Curriculum.", Replacement:=vbNullString, LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
    'now replace "Division Department" with a shorter version. Header row is already selected
    Selection.Replace what:="Division Department", Replacement:="Div Dept", LookAt:=xlPart, _
                      SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                      ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
    'delete some unneeded columns
    'deleting by the name in the header rather than by column number or letter because columns seem to keep getting added to the report
    'listing all the columns we want to delete, omitting the word 'Curriculum' since I already deleted that
    Dim colsToDelete(15) As String
    Dim colName         As Variant
    colsToDelete(0) = "BC Course Discipline"
    colsToDelete(1) = "Course ID Prefix"
    colsToDelete(2) = "Course Pathway"
    colsToDelete(3) = "Credit Hrs"
    colsToDelete(4) = "Credit Type"
    colsToDelete(5) = "Department"
    colsToDelete(6) = "Division"
    colsToDelete(7) = "FTE"
    colsToDelete(8) = "Gen Ed"
    colsToDelete(9) = "ICS Code"
    colsToDelete(10) = "Outlier"
    colsToDelete(11) = "Paid FTE"
    colsToDelete(12) = "Primary Instructor ID"
    colsToDelete(13) = "Primary Instructor Type"
    colsToDelete(14) = "SummaryKey"
    colsToDelete(15) = "Term"
    
    For Each colName In colsToDelete
        If Helper_procedures.SelectColumnFromTable("ClassListTable", colName) Then
            Selection.Delete Shift:=xlToLeft
            lastCol = lastCol - 1                'we now have one fewer used column, so we can decrement this variable
        End If
    Next colName
    
    'calling another Sub, which goes through all cells and changes any "numbers stored as text" to regular numbers
    Helper_procedures.FixNumberStoredAsText ("Class sections")
    
    'select the Sess column and format it
    If Helper_procedures.SelectColumnFromTable("ClassListTable", "Sess") Then
        Selection.FormatConditions.AddDatabar
        With Selection.FormatConditions(1)
            .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
            .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
            .BarColor.Color = 2668287
        End With
    End If
    
    'select the Enrolled column and format it; depending on how we exported (as "summarized" or "underlying"), this col may have two different names
    If Helper_procedures.SelectColumnFromTable("ClassListTable", "Enrolled") Then
        Selection.FormatConditions.AddColorScale ColorScaleType:=3
    ElseIf Helper_procedures.SelectColumnFromTable("ClassListTable", "Sum of Enrolled") Then
        Selection.FormatConditions.AddColorScale ColorScaleType:=3
    End If
    
    'formats instructor names to have a space after the comma
    'the underscore character lets you break a long single-line statement into multiple lines
    If Helper_procedures.SelectColumnFromTable("ClassListTable", "Instructor Name") Then
        Selection.Replace what:=",", Replacement:=", ", LookAt:=xlPart, _
                          SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                          ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    End If
    
    'cleans up Delivery Method names, e.g. from RemoteLearningBlended to Remote Blended
    If Helper_procedures.SelectColumnFromTable("ClassListTable", "Delivery Method") Then
        Selection.Replace what:="RemoteLearning", Replacement:="Remote ", LookAt:=xlPart, _
                          SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                          ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    End If
    
    'sort by instructor name
    With ActiveWorkbook.Worksheets("Class sections").ListObjects("ClassListTable").Sort
        .SortFields.Clear
        .SortFields.Add2 Key:=ActiveSheet.Range("ClassListTable[[#All],[Instructor Name]]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .Apply
    End With
    
    ' sort designators in alphbetical (ASCII-betical?) order
    Dim cellUnderInspection As Range
    Dim currentCellSorted As String
    
    If Helper_procedures.SelectColumnFromTable("ClassListTable", "Designator List") Then
        For Each cellUnderInspection In Selection.Cells()
            currentCellSorted = SortString(cellUnderInspection.Value)
            cellUnderInspection.Value = currentCellSorted
        Next
    End If

    ' calls a Sub that will remove the trailing zero from room numbers
    ' the first argument is the column number of the column named "Rm #"
    ' the single quote before the # in Rm # is a special-character escape
    Helper_procedures.TrimTrailingZero ActiveSheet.Range("ClassListTable[[#Headers], [Rm '#]]").Column, lastRow
    
    ' moves Schedule Notes to be the final column of the table, if it isn't already
    If lastCol > ActiveSheet.Range("ClassListTable[[#Headers], [Schedule Notes]]").Column Then
        ActiveSheet.Range(ActiveSheet.Cells(1, ActiveSheet.Range("ClassListTable[[#Headers], [Schedule Notes]]").Offset(, 1).Column), ActiveSheet.Cells(lastRow, lastCol)).Select
        Selection.Cut
        ActiveSheet.Range("ClassListTable[[#Headers], [Schedule Notes]]").Select
        Selection.Insert Shift:=xlToRight
    End If


    'clear the clipboard
    Application.CutCopyMode = False

    '    'filter at the end, because selecting is hard on filtered sheets
    '    'unfortunately, Range.AutoFilter only lets you choose the field to filter by using an integer offset, so we use the integer we found earlier
    '    With ActiveWorkbook.Sheets("Class sections").ListObjects("ClassListTable").Range
    '        .AutoFilter Field:=ActiveSheet.Range("ClassListTable[[#Headers], [Div Dept]]").Column, Criteria1:=Array("ENG1BASE", "ENG1COPR", "ENG5BASE"), Operator:=xlFilterValues
    '    End With
    
    'how to select columns by number rather than by letter (doing it by letter is much easier!)
    'Columns(1) specifies the first column; Resize(, x) expands the selection to a total width of x columns
    'autofits all columns from 1 through lastCol
    ActiveSheet.Columns(1).Resize(, lastCol).EntireColumn.AutoFit
    
    ' scroll towards the upper left
    ActiveWindow.LargeScroll up:=1, toLeft:=1
    
    ' doing a phantom Replace to reset the Replace function to the default values it has when Excel is opened
    ' it would be even cooler to set it to whatever the user had it at when they invoked the macro, but I think that's impossible
    ActiveCell.Replace what:=vbNullString, Replacement:=vbNullString, LookAt:=xlPart, _
                       SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                       ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
    'Curt Frye says it's good style to turn screen updating back on at the end of a macro, even though it's technically not necessary
    Application.ScreenUpdating = True
    
    'setting the status bar back to blank
    Application.StatusBar = vbNullString
    
End Sub

Private Function SortString(ByVal toSort As String) As String
    Dim substrings       As Variant
    Dim commaDelim As String
    commaDelim = ","
        
    'the line below puts the two-character codes into an array, delimiting with commas
    substrings = Split(Replace(toSort, " ", vbNullString), commaDelim)
    substrings = SortArray(substrings)
        
    ' whatever is assigned to the name of the function is what gets returned
    SortString = Join(substrings, commaDelim & " ")
End Function

Private Function SortArray(ByVal substrings As Variant) As Variant
    Dim temp        As Variant
    Dim firstCounter           As Long
    Dim secondCounter           As Long
        
    For firstCounter = LBound(substrings) To UBound(substrings) - 1
        For secondCounter = firstCounter + 1 To UBound(substrings)
            'Trim strips leading and trailing spaces
            'this is implementing a bubble sort, i believe
            If substrings(firstCounter) > substrings(secondCounter) Then
                'the three lines below swap firstCounter and secondCounter
                temp = substrings(firstCounter)
                substrings(firstCounter) = substrings(secondCounter)
                substrings(secondCounter) = temp
            End If
        Next secondCounter
    Next firstCounter
    SortArray = substrings
End Function

' making a sub private means it can't be called from another module and won't show up in the Macro window
Private Sub RenameSheet()
    ActiveWorkbook.Sheets(1).Name = "Class sections"
    ActiveWorkbook.Sheets("Class sections").ListObjects("Table1").Name = "ClassListTable"
End Sub

Private Sub RenameFile()
    
    Dim termNumber As String
    termNumber = ActiveSheet.Range("ClassListTable[[#Headers], [Term]]").Offset(1, 0).Value
    
    Dim termName As String
    
    If Right$(termNumber, 1) = 1 Then
        termName = "Fall"
    ElseIf Right$(termNumber, 1) = 2 Then
        termName = "Spring"
    ElseIf Right$(termNumber, 1) = 3 Then
        termName = "Summer"
    End If
    
    Dim newName     As String
    newName = Application.ActiveWorkbook.Path & "/" & termName & " " & termNumber & " BI schedule " & MonthName(Month(Date)) & " " & Day(Date) & ".xlsx"
    
    'including FileFormat ensures this will save as xlsx even if it was originally csv
    ActiveWorkbook.SaveAs Filename:=newName, FileFormat:=xlOpenXMLWorkbook
    
End Sub

Private Sub OpenFile()
    ' dimming as Variant because returns a Boolean False if user clicks cancel, so String isn't what we want
    ' https://www.youtube.com/watch?v=h_sC6Uwtwxk&ab_channel=LeilaGharani
    Dim FileToOpen As Variant
    Dim OpenBook As Workbook
    
    FileToOpen = Application.GetOpenFilename(MultiSelect:=False, FileFilter:="Excel Files (*.xls*),*xls*,CSV Files (*.csv*),*csv*")
    If FileToOpen <> False Then
        Set OpenBook = Application.Workbooks.Open(FileToOpen)
    Else
        End
    End If
    
End Sub


