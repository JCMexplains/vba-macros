Option Explicit
Sub BI_cleanup()

' BI_cleanup Macro
' Clean up export from Power BI

    ' variables for the last used row and the last used column
    Dim lastRow As Long
    lastRow = Cells(Rows.Count, 1).End(xlUp).Row 'gets the last used row
    Dim lastCol As Long
    lastCol = Cells(3, Columns.Count).End(xlToLeft).Column 'gets the last used column. at this point row 3 is the header row, so we look there

    Dim folderPath As String
    folderPath = Application.ActiveWorkbook.Path 'path without the file name; does not include the final forward slash There is a difference between ActiveWorkbook and ThisWorkbook--Google it
    
    Dim sMonth As String
    sMonth = CStr(Month(Date))

    Dim sDay As String
    sDay = CStr(Day(Date))

    Dim originalName As String
    originalName = Application.ActiveWorkbook.FullName 'this gets the full path INCLUDING the file name
    
    Dim newName As String
    newName = folderPath & "/" & "BI export " & sMonth & " " & sDay & ".xlsx"
    
    Dim currentCellSorted As String

    ActiveWorkbook.SaveAs Filename:=newName, FileFormat:=xlOpenXMLWorkbook 'including FileFormat ensures this will save as xlsx even if it was originally csv

    'Kill originalName 'deletes the original file -- works on local folders, won't work on a network folder--why?

    'create two counters
    Dim i As Integer
    i = 1
    
    Dim j As Integer
    j = 1
    
    'listing all the columns we want to delete, omitting 'Curriculum'
    Dim strColsToDelete(16) As String
    Dim var As Variant
    strColsToDelete(0) = "Outlier"
    strColsToDelete(1) = "FTE"
    strColsToDelete(2) = "Paid FTE"
    strColsToDelete(3) = "Course Pathway"
    strColsToDelete(4) = "Department"
    strColsToDelete(5) = "Credit Type"
    strColsToDelete(6) = "Primary Instructor Type"
    strColsToDelete(7) = "Term"
    strColsToDelete(8) = "ICS Code"
    strColsToDelete(9) = "Course Id Prefix"
    strColsToDelete(10) = "Primary Instructor Id"
    strColsToDelete(11) = "BC Course Discipline"
    strColsToDelete(12) = "Gen Ed"
    strColsToDelete(13) = "SummaryKey"
    strColsToDelete(14) = "Division"
    strColsToDelete(15) = "Credit Hrs"
    strColsToDelete(16) = "Std Cntct Hrs"
    
    'listing all the columns for which we want to change the number format
    Dim strColsToNumFormat(4) As String
    strColsToNumFormat(0) = "RefNum"
    strColsToNumFormat(1) = "Sess"
    strColsToNumFormat(2) = "Bldg"
    strColsToNumFormat(3) = "Rm #"
    strColsToNumFormat(4) = "Cost Center"
    
    'Turn off screen flickering as the macro runs
    Application.ScreenUpdating = False

    'delete the first two rows, which we don't need
     Rows("1:2").Delete
     lastRow = lastRow - 2

    'freeze panes
    With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 1
    End With
    ActiveWindow.FreezePanes = True
    
    'changes names of columns to more human-friendly names, replacing anything of the form Curriculum.xyz with xyz
    Rows("1:1").Select
    'documentation for this replace function: https://docs.microsoft.com/en-us/office/vba/api/excel.range.replace
    Selection.Replace What:="Curriculum.", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
        
    'now replace "Division Department" with a shorter version. Row 1 is already selected
     Selection.Replace What:="Division Department", Replacement:="Div Dept", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
    
   'delete some unneeded columns
   'deleting by the name in the header rather than by column number or letter because columns seem to keep getting added to the report
    For Each var In strColsToDelete
        For i = 1 To lastCol
            If Cells(1, i).Value = var Then
                Columns(i).Delete
                lastCol = lastCol - 1 'we now have one fewer used column, so we can decrement this variable
                'once we find what we want, we can exit this loop
                Exit For
            End If
        Next
        'reset the counter
        i = 1
    Next var
    
    'changing several columns from "number stored as text" to regular numbers
    For Each var In strColsToNumFormat
        For i = 1 To lastCol
            If Cells(1, i).Value = var Then
                ActiveSheet.Range(Cells(2, i), Cells(lastRow, i)).Select
                With Selection
                    .NumberFormat = "General"
                    .Value = .Value
                End With
                Exit For
            End If
        Next
            'reset the counter
        i = 1
    Next var
    
    'find the Sess column and format it
    For i = 1 To lastCol
        If Cells(1, i).Value = "Sess" Then
            ActiveSheet.Range(Cells(2, i), Cells(lastRow, i)).Select
            Selection.FormatConditions.AddDatabar
            With Selection.FormatConditions(1)
                .MinPoint.Modify newtype:=xlConditionValueAutomaticMin
                .MaxPoint.Modify newtype:=xlConditionValueAutomaticMax
                .BarColor.Color = 2668287
            End With
            Exit For
        End If
    Next
        'reset the counter
    i = 1
    
    'find the Enrolled column and format it
     For i = 1 To lastCol
        If Cells(1, i).Value = "Enrolled" Then
            ActiveSheet.Range(Cells(2, i), Cells(lastRow, i)).Select
            Selection.FormatConditions.AddColorScale ColorScaleType:=3
            Exit For
        End If
    Next
        'reset the counter
    i = 1
    
    'room numbers all come out of BI with one trailing zero, so remove it
     For i = 1 To lastCol
        If Cells(1, i).Value = "Rm #" Then
            ActiveSheet.Range(Cells(2, i), Cells(lastRow, i)).Select
            With Selection
                'currently does nothing
            End With
            Exit For
        End If
    Next
        'reset the counter
    i = 1
    
    'formats instructor names to have a space after the comma
    'the underscore character lets you break a long single-line statement into multiple lines
    For i = 1 To lastCol
        If Cells(1, i).Value = "Instructor Name" Then
            ActiveSheet.Range(Cells(2, i), Cells(lastRow, i)).Select
            Selection.Replace What:=",", Replacement:=", ", LookAt:=xlPart, _
                SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
                ReplaceFormat:=False, FormulaVersion:=xlReplaceFormula2
            Exit For
        End If
    Next
        'reset the counter
    i = 1
    
    'sort by instructor name
    ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Add2 _
        Key:=Range("Table1[[#All],[Instructor Name]]"), SortOn:=xlSortOnValues, _
        Order:=xlAscending, DataOption:=xlSortTextAsNumbers
    With ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    ' sort designators in alphbetical (ASCII-betical?) order
    For i = 1 To lastCol
        If Cells(1, i).Value = "Designator List" Then
            For j = 2 To lastRow
                currentCellSorted = SortString(Cells(j, i))
                Cells(j, i) = currentCellSorted
            Next
        End If
    Next
    'reset the counters
    i = 1
    j = 1
    
     'find the column number of the Div Dept column and store it
     
     Dim divDeptCol As Integer
     
     For i = 1 To lastCol
        If Cells(1, i).Value = "Div Dept" Then
            divDeptCol = i
            Exit For
        End If
    Next
        'reset the counter
    i = 1
    
    'The table in this sheet has been named Table1 by default
    'unfortunately, Range.AutoFilter only lets you choose the field to filter by using an integer offset, so we use the integer we found earlier
    ActiveWorkbook.Sheets("Sheet1").ListObjects("Table1").Range.AutoFilter Field:=divDeptCol, Criteria1:=Array("ENG1BASE", "ENG1COPR"), Operator:=xlFilterValues
    
    'how to select columns by number rather than by letter (doing it by letter is much easier!)
    'autofits selected columns
    Columns(1).Resize(, lastCol).EntireColumn.AutoFit
    
    'Curt Frye says it's good style to turn screen updating back on at the end of a macro, even though it's technically not necessary
    Application.ScreenUpdating = True
    
End Sub

Function SortString(ByVal val As String, Optional delim As String = ",") As String
    Dim arr() As String
    'the line below puts the two-character codes into an array, delimiting with commas
    arr() = Split(Replace(val, " ", ""), delim)
    SortArray arr
    SortString = Replace(Join(arr, delim), delim, delim & " ")
End Function
Sub SortArray(ByRef arr() As String)
    Dim temp As Variant
    Dim i As Long
    Dim j As Long
    
    For i = LBound(arr) To UBound(arr) - 1
        For j = i + 1 To UBound(arr)
            'Trim strips leading and trailing spaces
            'this is implementing a bubble sort, i believe
            If arr(i) > arr(j) Then
                'the three lines below swap i and j
                temp = arr(i)
                arr(i) = arr(j)
                arr(j) = temp
            End If
        Next j
    Next i
End Sub



